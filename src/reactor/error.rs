use std::error::Error as StdError;
use std::fmt::{self, Debug, Formatter};

use crossbeam_channel as chan;

use super::runtime::ControlEvent;
use crate::{Actor, Layout};

/// Errors generated by the re-actor
#[derive(Display)]
#[display(doc_comments)]
pub enum InternalError<L: Layout> {
    /// shutdown channel in the re-actor is broken
    ShutdownChanelBroken,

    /// control channel is broken; unable to send request
    ControlChannelBroken,

    /// actor with id {0} is not known to the re-actor
    UnknownActor(<L::RootActor as Actor>::Id),

    /// unknown pool {0}
    UnknownPool(L),

    /// actor with id {0} is already known
    RepeatedActor(<L::RootActor as Actor>::Id),

    /// pool with id {0} is already present in the re-actor
    RepeatedPoll(L),

    /// actor on pool {0} has not able to handle error. Details: {1}
    ActorError(L, <L::RootActor as Actor>::Error),

    /// error joining thread pool runtime {0}
    ThreadError(L),
}

// Required due to Derive macro adding L::RootActor: Debug unnecessary constraint
impl<L: Layout> Debug for InternalError<L> {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        match self {
            InternalError::ShutdownChanelBroken => f
                .debug_tuple("InternalError::ShutdownChanelBroken")
                .finish(),
            InternalError::ControlChannelBroken => f
                .debug_tuple("InternalError::ControlChannelBroken")
                .finish(),
            InternalError::UnknownActor(id) => f
                .debug_tuple("InternalError::UnknownActor")
                .field(id)
                .finish(),
            InternalError::UnknownPool(pool) => f
                .debug_tuple("InternalError::UnknownPool")
                .field(pool)
                .finish(),
            InternalError::RepeatedActor(id) => f
                .debug_tuple("InternalError::RepeatedActor")
                .field(id)
                .finish(),
            InternalError::RepeatedPoll(pool) => f
                .debug_tuple("InternalError::RepeatedPoll")
                .field(pool)
                .finish(),
            InternalError::ActorError(pool, err) => f
                .debug_tuple("InternalError::ActorError")
                .field(pool)
                .field(err)
                .finish(),
            InternalError::ThreadError(pool) => f
                .debug_tuple("InternalError::ThreadError")
                .field(pool)
                .finish(),
        }
    }
}

impl<L: Layout> StdError for InternalError<L> {}

impl<A: Actor, L: Layout> From<chan::SendError<ControlEvent<A>>> for InternalError<L> {
    fn from(_: chan::SendError<ControlEvent<A>>) -> Self {
        InternalError::ControlChannelBroken
    }
}
